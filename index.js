const express = require('express');
const cors = require('cors');
const { PDFDocument } = require('pdf-lib');
const { chromium } = require('playwright');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

app.post('/audit', async (req, res) => {
  const { url } = req.body;

  if (!url) return res.status(400).json({ error: 'Missing URL' });

  let browser = null;

  try {
    browser = await chromium.launch();
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: 'networkidle' });

    const pdfBuffer = await page.pdf({ format: 'A4' });
    await browser.close();

    const pdfDoc = await PDFDocument.load(pdfBuffer);
    const pages = pdfDoc.getPages();
    const { width, height } = pages[0].getSize();

    pages[0].drawText('Report generated by SiteGuard AI', {
      x: 50,
      y: height - 30,
      size: 10,
    });

    const finalPdf = await pdfDoc.save();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=audit-report.pdf');
    res.send(Buffer.from(finalPdf));
  } catch (err) {
    console.error('Audit failed:', err);
    if (browser) await browser.close();
    res.status(500).json({ error: 'Audit failed', details: err.message });
  }
});

app.listen(port, () => {
  console.log(`SiteGuard backend listening on port ${port}`);
});
